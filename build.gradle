buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:3.3.0'
    }
}

plugins {
    id 'org.hidetake.ssh' version '2.9.0'
}


apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'biz.aQute.bnd.builder'

group 'com.jforexcn'
version '3.0'

repositories {
    mavenCentral()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven { url "http://www.dukascopy.com/client/jforexlib/publicrepo/" }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

dependencies {
    compile 'org.projectlombok:lombok:1.18.2'
    compile 'org.nanohttpd:nanohttpd:2.3.1'
    compile 'org.reflections:reflections:0.9.11'
    compile 'org.apache.commons:commons-email:1.5'
    compile 'com.dukascopy.dds2:DDS2-jClient-JForex:3.3.16.1'
    compile 'com.dukascopy.api:JForex-API:2.13.56'
    compile 'org.slf4j:slf4j-log4j12:1.7.5'
    testCompile 'org.mockito:mockito-core:2.7.2'
    testCompile 'junit:junit:4.12'
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

jar {
    manifest {
        attributes "Main-Class": "com.jforexcn.shared.CLI",
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Bundle-Name': project.name,
                'Bundle-SymbolicName': 'com.jforexcn.shared',
                'Export-Package': 'com.jforexcn.shared*'
    }
    baseName = project.name
}

task hubJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Bundle-Name': project.name,
                'Bundle-SymbolicName': 'com.jforexcn.hub',
                'Export-Package': 'com.jforexcn.hub*'
    }
    baseName = project.name
    exclude('com/jforexcn/wiki/**')
    exclude('com/jforexcn/inbox/**')
    exclude('com/jforexcn/shared/**')
    exclude('com/jforexcn/tower/**')
    with jar
}

task towerJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Bundle-Name': project.name,
                'Bundle-SymbolicName': 'com.jforexcn.tower',
                'Export-Package': 'com.jforexcn.tower*'
    }
    baseName = project.name
    exclude('com/jforexcn/hub/**')
    exclude('com/jforexcn/wiki/**')
    exclude('com/jforexcn/inbox/**')
    exclude('com/jforexcn/shared/**')
    with jar
}

task uberJar(type: Jar) {
    manifest {
        attributes "Main-Class": "com.jforexcn.shared.CLI",
                'Implementation-Title': project.name,
                'Implementation-Version': version,
                'Class-Path': '.' + ' ' + configurations.compile.collect { it.getName() }.join(' ')
    }
    baseName = project.name
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task copyJarToPlugins(type: Copy, dependsOn: ':jar') {
    if (project.hasProperty('pluginFolder')) {
        from "${project.buildDir}/libs/${jar.archiveName}"
        into pluginFolder
    }
}

task copyUberJarToPlugins(type: Copy, dependsOn: ':uberJar') {
    if (project.hasProperty('pluginFolder')) {
        from "${project.buildDir}/libs/${jar.archiveName}"
        into pluginFolder
    }
}



ssh.settings {
    dryRun = project.hasProperty('dryRun')
}

remotes {
    if (project.hasProperty('remoteHost')) {
        server {
            host = remoteHost
            user = remoteUser
            passphrase = remoteKeyPassphrase
            identity = file("${System.properties['user.home']}/.ssh/id_rsa")
        }
    }
}

task showPlatformVersion() {
    doLast {
        ssh.run {
            session(remotes.server) {
                execute 'uname -a'
                execute 'ifconfig', ignoreError: true
            }
        }
    }
}

task deployAll(dependsOn: ':uberJar') {
    doLast {
        if (project.hasProperty('remoteHost')) {
            ssh.run {
                session(remotes.server) {
                    put from: "${project.buildDir}/libs/${jar.archiveName}", into: "${remotePath}/"
                    put from: "${project.rootDir}/JForexKit.properties", into: "${remotePath}/"
                    put from: "${project.rootDir}/HubStrategy.properties", into: "${remotePath}/"
                }
            }
        }
    }
}

task deployJar(dependsOn: ':uberJar') {
    doLast {
        if (project.hasProperty('remoteHost')) {
            ssh.run {
                session(remotes.server) {
                    put from: "${project.buildDir}/libs/${jar.archiveName}", into: "${remotePath}/"
                }
            }
        }
    }
}

task deployConfig() {
    doLast {
        if (project.hasProperty('remoteHost')) {
            ssh.run {
                session(remotes.server) {
                    put from: "${project.rootDir}/JForexKit.properties", into: "${remotePath}/"
                    put from: "${project.rootDir}/HubStrategy.properties", into: "${remotePath}/"
                }
            }
        }
    }
}